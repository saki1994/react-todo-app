{"version":3,"sources":["components/Header.jsx","components/AddList.jsx","components/List.jsx","components/Paragraph.jsx","components/Button.jsx","components/data.js","components/Content.jsx","components/Footer.jsx","components/App.jsx","index.js"],"names":["Header","event","screenMode","hour","Date","getHours","className","onClick","src","alt","AddList","addTodoList","useState","text","id","listStatus","textInput","setTextInput","action","onKeyPress","key","previous","preventDefault","icon","faCircle","color","style","border","borderRadius","onChange","val","target","value","type","placeholder","List","onDelete","onCheckList","isMouseOver","setIsMouseOver","checkBoxStatus","checked","renderCheckbox","labelStyle","spanStyle","onMouseOver","onMouseOut","visibility","Paragraph","Button","handleClick","dataList","Content","todoList","setTodoList","remainingList","filter","item","length","completedList","setCompletedList","activeList","setActiveList","completedBtnClicked","setCompletedBtnClicked","activeBtnClicked","setActiveBtnClicked","allBtnClicked","setAllBtnClicked","deleteList","prev","isCheckboxClick","elementIndex","findIndex","element","newArr","getAllTrue","getAllFalse","allItem","allItems","renderButton","clickEvent","renderMap","arrayName","map","navbarClasses","inputList","Footer","App","setScreenMode","mode","document","body","backgroundColor","param","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9c975f04.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = ({event, screenMode}) => {\r\n  const day = new Date();\r\n  const hour = day.getHours();\r\n\r\n  const clickEvent = () => {\r\n    event(screenMode);\r\n  }\r\n  \r\n  return (\r\n    <header className=\"header\">\r\n      <h1>TODO</h1>\r\n      <img  onClick={clickEvent}\r\n        src={hour <= 18 ? \"images/icon-sun.svg\" : \"images/icon-moon.svg\"}\r\n        alt={hour <= 18 ? \"sun-icon\" : \"moon-icon\"}\r\n      />\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst AddList = ({ addTodoList, screenMode }) => {\r\n  //variable to save user inputs\r\n  const [textInput, setTextInput] = useState({\r\n    text: \"\",\r\n    id: 6,\r\n    listStatus: false,\r\n  });\r\n\r\n  //event for form keypress\r\n  const handleClick = (event) => {\r\n    // gets call only if enter key is pressed\r\n    if (event.key === \"Enter\") {\r\n      addTodoList(textInput);\r\n      setTextInput((previous) => {\r\n        return {\r\n          ...previous,\r\n          text: \"\",\r\n          id: textInput.id + 1,\r\n          listStatus: false,\r\n        };\r\n      });\r\n      //prevent website from refreshing\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  //Event for input changes (on time)\r\n  const handleChange = (event) => {\r\n    //save input value to textInput variable.\r\n    let val = event.target.value;\r\n\r\n    setTextInput((previous) => {\r\n      return {\r\n        ...previous,\r\n        text: val,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={screenMode === \"light\" ? \"form-light\" : \"form-dark\"}\r\n      action=\"#\"\r\n      onKeyPress={handleClick}\r\n    >\r\n      <FontAwesomeIcon\r\n        icon={faCircle}\r\n        color={screenMode === \"light\" ? \"white\" : \"hsl(237, 14%, 26%)\"}\r\n        style={{ border: \"1px solid grey\", borderRadius: \"50%\" }}\r\n      />\r\n\r\n      <input\r\n        className=\"add-task\"\r\n        onChange={handleChange}\r\n        type=\"text\"\r\n        placeholder=\"Create a new todo\"\r\n        value={textInput.text}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddList;\r\n","import React, { useState } from \"react\";\r\n\r\nconst List = ({ text, onDelete, id, onCheckList, listStatus, screenMode }) => {\r\n  const [isMouseOver, setIsMouseOver] = useState(false);\r\n\r\n  const checkBoxStatus = (event) => {\r\n    onCheckList(id, event.target.checked);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    onDelete(id);\r\n  };\r\n\r\n  const handleMouseOver = () => {\r\n    setIsMouseOver(true);\r\n  };\r\n\r\n  const handleMouseOut = () => {\r\n    setIsMouseOver(false);\r\n  };\r\n\r\n  const renderCheckbox = (labelStyle, spanStyle) => {\r\n    return (\r\n      <label className={labelStyle}>\r\n        <input type=\"checkbox\" id=\"checkbox\" onChange={checkBoxStatus} />\r\n        <span className={spanStyle}></span>\r\n      </label>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <li onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n      {listStatus && renderCheckbox(\"checked-label\", \"checked-span\")}\r\n      {!listStatus && !isMouseOver && renderCheckbox(\"unhovered-label\", \"\")}\r\n      {!listStatus &&\r\n        isMouseOver &&\r\n        renderCheckbox(\r\n          \"hovered-label\",\r\n          screenMode === \"light\"\r\n            ? \"hovered-span light-span\"\r\n            : \"hovered-span dark-span\"\r\n        )}\r\n\r\n      <span className={listStatus ? \"todo-list-inactive\" : \"todo-list-active\"}>\r\n        {text}\r\n      </span>\r\n      {/* Event onClick calls onDelete and pass in the id */}\r\n      <button\r\n        style={{ visibility: isMouseOver ? \"visible\" : \"hidden\" }}\r\n        onClick={handleClick}\r\n      >\r\n        <img src=\"/images/icon-cross.svg\" alt=\"delete-icon\"></img>\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\n\r\nconst Paragraph = ({text}) => {\r\n    return (\r\n        <p>{text}</p>\r\n    )\r\n}\r\n\r\nexport default Paragraph\r\n","import React from \"react\";\r\n\r\nconst Button = ({ text, handleClick, id, screenMode }) => {\r\n  const btnClicked = () => {\r\n    handleClick(id);\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={\r\n        screenMode === \"light\"\r\n          ? \"navbar-btn btn-light-mode\"\r\n          : \"navbar-btn btn-dark-mode\"\r\n      }\r\n      onClick={btnClicked}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","const dataList =  [\r\n    {\r\n        text: \"Complete online Javascript course\",\r\n        id: 0,\r\n        listStatus: true,\r\n      },\r\n      {\r\n        text: \"Jog around the park 3x\",\r\n        id: 1,\r\n        listStatus: false,\r\n      },\r\n      {\r\n        text: \"Ten minutes meditation\",\r\n        id: 2,\r\n        listStatus: false,\r\n      },\r\n      {\r\n        text: \"Read for 1 hour\",\r\n        id: 3,\r\n        listStatus: false,\r\n      }, \r\n      {\r\n        text: \"Pick up groceries\",\r\n        id: 4,\r\n        listStatus: false,\r\n      },\r\n      {\r\n        text: \"Complete To Do App on FrontEnd Mentor\",\r\n        id: 5,\r\n        listStatus: false,\r\n      } \r\n]\r\n\r\nexport default dataList","import React, { useState } from \"react\";\r\nimport AddList from \"./AddList\";\r\nimport List from \"./List\";\r\nimport Paragraph from \"./Paragraph\";\r\nimport Button from \"./Button\";\r\nimport dataList from \"./data\";\r\n\r\nconst Content = ({ screenMode }) => {\r\n  //An array of list user input\r\n  const [todoList, setTodoList] = useState([...dataList]);\r\n  const remainingList = todoList.filter(\r\n    (item) => item.listStatus === false\r\n  ).length;\r\n\r\n  const [completedList, setCompletedList] = useState([]);\r\n  const [activeList, setActiveList] = useState([]);\r\n\r\n  const [completedBtnClicked, setCompletedBtnClicked] = useState(false);\r\n  const [activeBtnClicked, setActiveBtnClicked] = useState(false);\r\n  const [allBtnClicked, setAllBtnClicked] = useState(true);\r\n\r\n  // function to add a list.\r\n  const addTodoList = (inputList) => {\r\n    setTodoList((prev) => {\r\n      return [...prev, inputList];\r\n    });\r\n  };\r\n\r\n  //Function to delete a list\r\n  const deleteList = (id) => {\r\n    //return all list except the list with param(id)\r\n    setTodoList((prev) => {\r\n      return prev.filter((item) => {\r\n        return item.id !== id;\r\n      });\r\n    });\r\n  };\r\n\r\n  //Change status of a list to true\r\n  const isCheckboxClick = (id, value) => {\r\n    let elementIndex = todoList.findIndex((element) => element.id === id);\r\n    let newArr = [...todoList];\r\n\r\n    newArr[elementIndex] = { ...newArr[elementIndex], listStatus: value };\r\n\r\n    setTodoList(newArr);\r\n  };\r\n\r\n  const handleClick = (id) => {\r\n    const getAllTrue = todoList.filter((item) => {\r\n      return item.listStatus === true;\r\n    });\r\n\r\n    const getAllFalse = todoList.filter((item) => {\r\n      return item.listStatus === false;\r\n    });\r\n\r\n    const allItem = [...todoList];\r\n\r\n    if (id === \"completed\") {\r\n      setCompletedList(getAllTrue);\r\n      setCompletedBtnClicked(true);\r\n      setActiveBtnClicked(false);\r\n      setAllBtnClicked(false);\r\n    } else if (id === \"active\") {\r\n      setActiveList(getAllFalse);\r\n      setCompletedBtnClicked(false);\r\n      setActiveBtnClicked(true);\r\n      setAllBtnClicked(false);\r\n    } else if (id === \"all\") {\r\n      setAllBtnClicked(allItem);\r\n      setCompletedBtnClicked(false);\r\n      setActiveBtnClicked(false);\r\n    } else if (id === \"clearCompleted\") {\r\n      setTodoList((allItems) => {\r\n        return allItems.filter((item) => {\r\n          return item.listStatus !== true;\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const renderList = (text, id, listStatus) => {\r\n    return (\r\n      <List\r\n        text={text}\r\n        key={id}\r\n        id={id}\r\n        onDelete={deleteList}\r\n        onCheckList={isCheckboxClick}\r\n        listStatus={listStatus}\r\n        screenMode={screenMode}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderButton = (text, id, clickEvent) => {\r\n    return (\r\n      <Button\r\n        id={id}\r\n        text={text}\r\n        handleClick={clickEvent}\r\n        screenMode={screenMode}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderMap = (arrayName) => {\r\n    return arrayName.map((item) =>\r\n      renderList(item.text, item.id, item.listStatus)\r\n    );\r\n  };\r\n\r\n  const navbarClasses = `filter-tab mobile-size ${\r\n    screenMode === \"light\" ? \"light-navbar\" : \"dark-navbar\"\r\n  }`;\r\n\r\n  return (\r\n    <main>\r\n      <AddList screenMode={screenMode} addTodoList={addTodoList} />\r\n\r\n      <div\r\n        className={\r\n          screenMode === \"light\" ? \"todo-box light-mode\" : \"todo-box dark-mode\"\r\n        }\r\n      >\r\n        <ul>\r\n          {activeBtnClicked && renderMap(activeList)}\r\n          {completedBtnClicked && renderMap(completedList)}\r\n          {allBtnClicked && renderMap(todoList)}\r\n        </ul>\r\n        <div className=\"bottom-navbar\">\r\n          <Paragraph text={remainingList + \" items left\"} />\r\n\r\n          <div className=\"desktop-size\">\r\n            {renderButton(\"All\", \"all\", handleClick)}\r\n            {renderButton(\"Active\", \"active\", handleClick)}\r\n            {renderButton(\"Completed\", \"completed\", handleClick)}\r\n          </div>\r\n          {renderButton(\"Clear Completed\", \"clearCompleted\", handleClick)}\r\n        </div>\r\n      </div>\r\n\r\n      <div className={navbarClasses}>\r\n        {renderButton(\"All\", \"all\", handleClick)}\r\n        {renderButton(\"Active\", \"active\", handleClick)}\r\n        {renderButton(\"Completed\", \"completed\", handleClick)}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            Drag and drop to reorder list.\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React, {useState} from \"react\";\r\nimport Header from \"./Header\";\r\nimport Content from \"./Content\";\r\nimport Footer from \"./Footer\";\r\nimport \"./styles.scss\"; \r\n\r\nconst App = () => {\r\n   \r\n  const [screenMode, setScreenMode] = useState(\"light\");\r\n\r\n  const clickEvent = (param) => {\r\n    if (param === \"light\") {\r\n      setScreenMode(\"dark\")\r\n    } else {\r\n      setScreenMode(\"light\")\r\n    }\r\n  }  \r\n  \r\n  //sets the body background color when theme is toggled \r\n  const mode = screenMode === \"light\" ? \"white\" : \"black\";\r\n  document.body.style.backgroundColor = mode;\r\n\r\n  return (\r\n    <div>\r\n      <img\r\n        className=\"background\"\r\n        src={`/images/bg-desktop-${screenMode}.jpg`} \r\n        alt=\"background-light\"\r\n      />\r\n      <div className=\"container\">\r\n        <Header screenMode={screenMode} event={clickEvent}/>\r\n        <Content screenMode={screenMode}/>\r\n        <Footer />\r\n      </div>\r\n       \r\n    </div>\r\n  ); \r\n};\r\n\r\nexport default App;\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\"; \r\n \r\nReactDOM.render(  \r\n    <App /> ,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}